runtime "addon::stacks" {
    defaults {
        network_id = env.stacks_network_id
        rpc_api_url = env.stacks_api_url
    }
}

wallet "operator" "stacks::mnemonic" {
    mnemonic = env.operator_mnemonic
}

action "wormhole_traits_deployment" "stacks::deploy_contract" {
    description = "Deploy wormhole-traits contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "wormhole-traits")
    signer = wallet.operator
    fee_strategy = "high"
    confirmations = 1
}

action "pyth_trait_deployment" "stacks::deploy_contract" {
    description = "Deploy pyth-traits contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "pyth-traits")
    signer = wallet.operator
    fee_strategy = "high"
    depends_on = [action.wormhole_core_deployment]
}

action "pyth_governance_deployment" "stacks::deploy_contract" {
    description = "Deploy pyth-governance contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "pyth-governance")
    signer = wallet.operator
    fee_strategy = "high"
    depends_on = [action.pyth_trait_deployment, action.hk_cursor_deployment]
}

action "pyth_oracle_deployment" "stacks::deploy_contract" {
    description = "Deploy pyth-oracle contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "pyth-oracle")
    signer = wallet.operator
    fee_strategy = "high"
    depends_on = [action.pyth_trait_deployment, action.pyth_governance_deployment]
}

action "pyth_pnau_decoder_deployment" "stacks::deploy_contract" {
    description = "Deploy pyth-pnau-decoder contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "pyth-pnau-decoder")
    signer = wallet.operator
    fee_strategy = "high"
    depends_on = [action.pyth_trait_deployment, action.hk_merkle_tree_keccak160_deployment, action.pyth_governance_deployment]
}

action "pyth_store_deployment" "stacks::deploy_contract" {
    description = "Deploy pyth-store contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "pyth-store")
    signer = wallet.operator
    fee_strategy = "high"
    depends_on = [action.pyth_trait_deployment, action.pyth_governance_deployment]
}

action "wormhole_core_deployment" "stacks::deploy_contract" {
    description = "Deploy wormhole-core contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "wormhole-core")
    signer = wallet.operator
    fee_strategy = "high"
    depends_on = [action.wormhole_traits_deployment, action.hk_cursor_deployment]
}

action "hk_cursor_deployment" "stacks::deploy_contract" {
    description = "Deploy hk-cursor contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "hk-cursor")
    signer = wallet.operator
    fee_strategy = "high"
}

action "hk_merkle_tree_keccak160_deployment" "stacks::deploy_contract" {
    description = "Deploy hk-merkle-tree-keccak160 contract"
    contract = stacks::get_contract_from_clarinet_project(env.clarinet_manifest_path, "hk-merkle-tree-keccak160")
    fee_strategy = "high"
    signer = wallet.operator
}
